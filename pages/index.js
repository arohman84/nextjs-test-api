import Head from "next/head";
import Image from "next/image";
import { useState, useCallback } from "react";
import axios from "axios";
import toast, { Toaster } from "react-hot-toast";
import BodyParams from "@/components/body-params";
import Config from "@/components/config";
import Response from "@/components/response";
import styles from "@/styles/Home.module.css";

const dummy = () => {
  return {
    name: "test-api",
    version: "0.1.0",
    private: true,
    scripts: {
      dev: "next dev",
      build: "next build",
      start: "next start",
      lint: "next lint",
    },
    dependencies: {
      "@codemirror-toolkit/react": "^0.3.0",
      "@codemirror/commands": "^6.1.1",
      "@codemirror/lang-json": "^6.0.1",
      "@codemirror/lang-markdown": "^6.0.1",
      "@codemirror/language-data": "^6.1.0",
      "@codemirror/state": "^6.1.2",
      "@codemirror/theme-one-dark": "^6.1.0",
      "@codemirror/view": "^6.3.0",
      axios: "^1.3.4",
      codemirror: "^6.0.1",
      daisyui: "^2.51.3",
      joi: "^17.8.3",
      next: "12.3.1",
      react: "18.2.0",
      "react-dom": "18.2.0",
      "react-icons": "^4.4.0",
      "react-syntax-highlighter": "^15.5.0",
      "remark-gfm": "^3.0.1",
    },
    devDependencies: {
      "@uiw/react-codemirror": "^4.19.9",
      autoprefixer: "^10.4.12",
      eslint: "8.24.0",
      "eslint-config-next": "12.3.1",
      postcss: "^8.4.17",
      tailwindcss: "^3.1.8",
    },
  };
};

const defaultState = () => {
  return {
    dependencies: {
      "@codemirror-toolkit/react": "^0.3.0",
      "@codemirror/commands": "^6.1.1",
      "@codemirror/lang-json": "^6.0.1",
      "@codemirror/lang-markdown": "^6.0.1",
      "@codemirror/language-data": "^6.1.0",
      "@codemirror/state": "^6.1.2",
      "@codemirror/theme-one-dark": "^6.1.0",
      "@codemirror/view": "^6.3.0",
      axios: "^1.3.4",
      codemirror: "^6.0.1",
      daisyui: "^2.51.3",
      joi: "^17.8.3",
      next: "12.3.1",
      react: "18.2.0",
      "react-dom": "18.2.0",
      "react-icons": "^4.4.0",
      "react-syntax-highlighter": "^15.5.0",
      "remark-gfm": "^3.0.1",
    },
  };
};

export default function Home() {
  const [inputAddress, setInputAddress] = useState();
  const [params, setParams] = useState();
  const [config, setDoc] = useState(defaultState);
  const [response, setResponse] = useState(dummy);
  const [type, setType] = useState("get");
  const [error, setError] = useState(null);
  const handleDocChange = useCallback((newDoc) => {
    setDoc(newDoc);
  }, []);
  const handleParamsChange = useCallback((d) => {
    setParams(d);
  }, []);
  const handleSelectChange = (e) => {
    setType(e.target.value);
    setResponse();
  };
  const onHandleInputAddress = (e) => {
    setInputAddress(e.target.value);
  };

  const submitAPI = async () => {
    try {
      let val = null;
      if (type === "get") {
        val = axios.get(inputAddress);
      } else if (type === "post") {
        val = axios.post(inputAddress, params);
      } else if (type === "put") {
        val = axios.put(inputAddress, params);
      } else {
        val = axios.delete(inputAddress);
      }
      await val
        .then((response) => {
          setResponse(response.data);
          // setError(null);
        })
        .catch((e) => {
          toast.error(<p>{e.message}</p>);
        });
    } catch (error) {
      toast.error(<p>{error}</p>);
    }
  };

  return (
    <>
      <Head>
        <title>Test API</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="justify-center p-[6rem] pt-[1rem]">
        <div className="flex w-full gap-4 mt-10">
          <select
            className="max-w-xs select select-bordered"
            onChange={handleSelectChange}
          >
            <option value="get">GET</option>
            <option value="post">POST</option>
            <option value="put">PUT</option>
            <option value="delete">DELETE</option>
          </select>
          <div className="w-full form-control">
            <div className="input-group">
              <input
                type="text"
                placeholder="Searchâ€¦"
                className="w-full input input-bordered"
                value={inputAddress}
                onChange={onHandleInputAddress}
              />
              <button className="btn btn-square w-[80px]" onClick={submitAPI}>
                <div>submit</div>
              </button>
            </div>
          </div>
        </div>
        {(type === "put" || type === "post") && (
          <div className="w-full mt-10">
            <BodyParams data={params} onChange={handleParamsChange} />
          </div>
        )}
        <div className="flex w-full gap-4 mt-10">
          {/* <h2 className="text-xl font-semibold">Response</h2> */}
          <Config config={config} onChange={handleDocChange} />
          <Response data={response} />
        </div>
      </main>
      <Toaster
        position="bottom-right"
        gutter={8}
        toastOptions={{
          duration: 10000,
        }}
      />
    </>
  );
}
